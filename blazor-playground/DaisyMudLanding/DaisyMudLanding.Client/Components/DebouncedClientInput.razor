@rendermode InteractiveAuto

<input @attributes="AdditionalEligibleAttributes"
       @ref="_inputElement"
       @bind:get="Value"
       @bind:set="SetValue"
       @bind:event="ondebounceinput"
/>

@implements IAsyncDisposable
@inject IJSRuntime Js

@code {
    private ElementReference? _inputElement;
    private IJSObjectReference? _jsModule;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();

    private IReadOnlyDictionary<string, object> AdditionalEligibleAttributes =>
        AdditionalAttributes.Where(kvp => !kvp.Key.StartsWith("@"))
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    /// <summary>
    ///     This parameter is not reactive. Once the component is rendered for the first time, then
    ///     changing it won't have any effect.
    /// </summary>
    [Parameter]
    public int DebounceIntervalMiliSeconds { get; set; } = 500;

    private string _value = "";

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            StateHasChanged(); //re-render
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _jsModule = await Js.InvokeAsync<IJSObjectReference>("import",
                $"./Components/{nameof(DebouncedClientInput)}.razor.js");
            await _jsModule.InvokeVoidAsync("supportDebounceInputEvent", _inputElement, DebounceIntervalMiliSeconds);
        }

        if (_jsModule is not null)
        {
            await _jsModule.InvokeVoidAsync("setBounceValue", _inputElement, Value);
        }
    }

    private async Task SetValue(string arg)
    {
        string newValue;
        if (_jsModule is null)
        {
            newValue = arg;
        }
        else
        {
            newValue = await _jsModule.InvokeAsync<string?>("getBounceValue", _inputElement) ?? "";
        }

        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule is null)
            return;
        try
        {
            await _jsModule.DisposeAsync();
        }
        catch (JSDisconnectedException ex)
        {
            Console.WriteLine(ex);
        }
    }

}
