@using System.Timers
@implements IDisposable

<input type="text" value="@Value" @oninput="OnInputChanged" @attributes="AdditionalEligibleAttributes"/>

@code {
    private Timer? _timer;
    private string _internalValue = string.Empty;
    private string _value = string.Empty;

    private IReadOnlyDictionary<string, object> AdditionalEligibleAttributes =>
        AdditionalAttributes.Where(kvp => !kvp.Key.StartsWith("@"))
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                _internalValue = value;
            }
        }
    }

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public int DebounceIntervalMiliSeconds { get; set; } = 500;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private void OnInputChanged(ChangeEventArgs e)
    {
        _internalValue = e.Value?.ToString() ?? string.Empty;

        // Initialize timer if it doesn't exist
        if (_timer == null)
        {
            _timer = new Timer(DebounceIntervalMiliSeconds);
            _timer.Elapsed += OnTimerElapsed;
            _timer.AutoReset = false;
        }

        // Reset and restart the timer
        _timer.Stop();
        _timer.Interval = DebounceIntervalMiliSeconds; // In case DebounceInterval changed
        _timer.Start();
    }

    private async void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            if (_value == _internalValue) return;
            // Only raise ValueChanged if the value actually changed
            _value = _internalValue;
            try
            {
                await ValueChanged.InvokeAsync(_value);
            }
            catch (Exception ex)
            {
                // Log the exception if you have a logging framework
                Console.WriteLine($"Error in ValueChanged callback: {ex}");
            }

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer.Stop();
            _timer.Elapsed -= OnTimerElapsed;
            _timer.Dispose();
            _timer = null;
        }
    }

}