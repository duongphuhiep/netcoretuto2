<a href="@FoundItem?.Url" class="list-row hover:bg-base-200 @(IsSkeleton ? "skeleton" : "")">
    <div class="landing-text-small @(IsSkeleton ? "skeleton text-transparent" : "")">
        @((MarkupString)HighlightedTitle)
    </div>
    <div class="list-col-wrap text-xs @(IsSkeleton ? "skeleton text-transparent" : "landing-text-c50")">
        @((MarkupString)HighlightedDescription)
    </div>
</a>

@code {
    [Parameter] public string? Term { get; set; }
    [Parameter] public FoundItem? FoundItem { get; set; }
    [Parameter] public bool IsSkeleton { get; set; }

    private string HighlightedDescription
    {
        get
        {
            if (string.IsNullOrEmpty(FoundItem?.Description) || string.IsNullOrEmpty(Term))
            {
                return FoundItem?.Description ?? string.Empty;
            }

            // Simple case-insensitive replace
            return FoundItem.Description.Replace(Term, $"<span class=\"text-accent\">{Term}</span>",
                StringComparison.OrdinalIgnoreCase);
        }
    }

    private string HighlightedTitle
    {
        get
        {
            if (string.IsNullOrEmpty(FoundItem?.Title) || string.IsNullOrEmpty(Term))
            {
                return FoundItem?.Title ?? string.Empty;
            }

            // Simple case-insensitive replace
            return FoundItem.Title.Replace(Term, $"<span class=\"text-accent\">{Term}</span>",
                StringComparison.OrdinalIgnoreCase);
        }
    }

}