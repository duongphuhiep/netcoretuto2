@rendermode InteractiveAuto
<StateManager GetState="GetState" StateKey="@(typeof(Notification[]).FullName)">
    <div class="dropdown dropdown-start lg:dropdown-end">
        <div tabindex="0" role="button" class="indicator">
            <span class="indicator-item status status-info"></span>
            <a class="tooltip tooltip-bottom" data-tip="Notifications">
                <LiBell/>
            </a>
        </div>

        <div tabindex="0" class="dropdown-content z-1">
            <div class="list bg-base-100 rounded-box w-80 p-2 shadow-md inset-x-5">
                <li class="p-4 pb-2 text-xs opacity-60 tracking-wide">
                    Notifications
                </li>

                @if (context is null)
                {
                    @for (var i = 0; i <= 1; i++)
                    {
                        //Skeleton
                        <NotificationItem/>
                    }
                }
                else
                {
                    @foreach (var notif in context)
                    {
                        <NotificationItem Notification="notif"/>
                    }
                }
            </div>
        </div>
    </div>
</StateManager>
@inject NotificationService _notificationService

@code
{
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private ValueTask<Notification[]> GetState()
    {
        return _notificationService.GetNotifications(CancellationToken.None);
    }
}
