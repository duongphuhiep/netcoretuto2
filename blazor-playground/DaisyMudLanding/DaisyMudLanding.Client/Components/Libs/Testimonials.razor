@rendermode InteractiveAuto
<ShowMore>
    <div class="flex flex-row flex-wrap justify-around gap-5">
        @if (TestimonialsList is null)
        {
            @for (var i = 0; i < 4; i++)
            {
                <TestimonialCard/>
            }
        }
        else
        {
            @foreach (var t in TestimonialsList)
            {
                <TestimonialCard Testimonial="t"/>
            }
        }
    </div>
</ShowMore>

@inject TestimonialService _testimonialService
@inject PersistentComponentState _applicationState
@implements IDisposable

@code
{
    private PersistingComponentStateSubscription _persistingSubscription;
    private const string _StateKey = nameof(Testimonials);
    public Testimonial[]? TestimonialsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!_applicationState.TryTakeFromJson<Testimonial?[]>(_StateKey, out var restored))
        {
            TestimonialsList = await _testimonialService.GetTestimonials(CancellationToken.None);
        }
        else
        {
            TestimonialsList = restored!;
        }

        // Call at the end to avoid a potential race condition at app shutdown
        _persistingSubscription = _applicationState.RegisterOnPersisting(async () => { _applicationState.PersistAsJson(_StateKey, TestimonialsList); });
    }

    public void Dispose()
    {
        _persistingSubscription.Dispose();
    }
}
